@page "/leave/create"
@page "/leave/edit/{id:int}"

@inject IEmployeeLeaveRepository _employeeLeaveRepository
@inject IEmployeeRepository _employeeRepository
@inject ILeaveTypeRepository _leaveTypeRepository
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Employee Leave</h3>

    <div class="col-8">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="EmployeeLeaveDTO" OnValidSubmit="HandleLeave">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Employee</label>
                    <InputSelect ValueChanged="@((int id) => LoadLeave(id))" ValueExpression="@(()=>EmployeeLeaveDTO.EmployeeId)" Value="EmployeeLeaveDTO.EmployeeId" class="form-select">
                        <option value="0" disabled="disabled" selected> -- Select Employee -- </option>
                        @foreach (var employee in EmployeeList)
                        {
                        <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                        }
                </InputSelect>
                <ValidationMessage For="()=>EmployeeLeaveDTO.EmployeeId" />
            </div>

            <div class="form-group">
                <label>Leave Type</label>
                <InputSelect @bind-Value="EmployeeLeaveDTO.LeaveId" class="form-select">
                    <option value="0" disabled="disabled" selected> -- Select Leave Type -- </option>
                    @foreach (var leave in LeaveTypeList)
                        {
                        <option value="@leave.Id">@leave.LeaveTypeName</option>
                        }
                </InputSelect>
                <ValidationMessage For="()=>EmployeeLeaveDTO.LeaveId" />
            </div>

            <div class="form-group">
                <label>Leave Days</label>
                <InputNumber @bind-Value="EmployeeLeaveDTO.TotalLeaveDays" class="form-control"></InputNumber>
                <ValidationMessage For="()=>EmployeeLeaveDTO.TotalLeaveDays" />
            </div>

            <div class="form-group">
                <label>Remarks</label>
                <InputText @bind-Value="EmployeeLeaveDTO.Remarks" class="form-control"></InputText>
                <ValidationMessage For="()=>EmployeeLeaveDTO.Remarks" />
            </div>

            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="designation" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }

    </div>
    <div class="col-4">
        <lable>Leave Days</lable>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Leave Type</th>
                    <th>Days</th>
                    <th>Enjoyed</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                @if (EmployeeLeaveDays.Any())
                {
                    foreach (var leave in EmployeeLeaveDays)
                    {
                        <tr>
                            <td>@leave.LeaveType.LeaveTypeName</td>
                            <td>@leave.TotalLeaveDays</td>
                            <td>@leave.EnjoyLeaveDays</td>
                            <td>@leave.BalanceLeaveDays</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public EmployeeLeaveDTO EmployeeLeaveDTO { get; set; } = new();
    public IEnumerable<EmployeeDTO> EmployeeList { get; set; } = new List<EmployeeDTO>();
    public IEnumerable<LeaveTypeDTO> LeaveTypeList { get; set; } = new List<LeaveTypeDTO>();
    public IEnumerable<EmployeeLeaveDTO> EmployeeLeaveDays { get; set; } = new List<EmployeeLeaveDTO>();


    public string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            IsLoading = false;
        }
        else
        {
            Title = "Edit";
            EmployeeLeaveDTO = await _employeeLeaveRepository.Get(Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            EmployeeList = await _employeeRepository.GetAll();
            LeaveTypeList = await _leaveTypeRepository.GetAll();
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLeave()
    {
        @if (EmployeeLeaveDTO.Id == 0)
        {
            EmployeeLeaveDTO.BalanceLeaveDays = EmployeeLeaveDTO.TotalLeaveDays;
            await _employeeLeaveRepository.Create(EmployeeLeaveDTO);
        }
        else
        {
            await _employeeLeaveRepository.Update(EmployeeLeaveDTO);
        }
        EmployeeLeaveDays = await _employeeLeaveRepository.GetAll(EmployeeLeaveDTO.EmployeeId);
        _navigationManager.NavigateTo("/leave/create");

    }

    private async Task LoadLeave(int id)
    {
        EmployeeLeaveDTO.EmployeeId = id;
        EmployeeLeaveDays = await _employeeLeaveRepository.GetAll(id);
    }

}
