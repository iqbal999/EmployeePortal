@page "/leaveapplication"
@inject NavigationManager _navigationManager
@inject UserManager<ApplicationUser> _userManager;
@inject IEmployeeRepository _employeeRepository
@inject ILeaveTypeRepository _leaveTypeRepository
@inject ILeaveApplicationRepository _leaveApplicationRepository
@inject IEmployeeLeaveRepository _employeeLeaveRepository

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">Leave Application</h3>
    <div class="col-8">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="@LeaveApplicationDTO" OnValidSubmit="@HandleLeaveApplication">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Leave Application Date</label>
                    <input type="text" readonly value="@LeaveApplicationDTO.ApplicationDate" class="form-control" />
                    <ValidationMessage For="()=>LeaveApplicationDTO.ApplicationDate" />
                </div>

                <div class="form-group">
                    <label>Leave Type</label>
                    <InputSelect @bind-Value="LeaveApplicationDTO.LeaveTypeId" class="form-select">
                        <option value="0" disabled="disabled" selected> -- Select Leave Type -- </option>
                        @foreach (var leaveType in LeaveTypeList)
                        {
                        <option value="@leaveType.Id">@leaveType.LeaveTypeName</option>
                        }
                </InputSelect>
                <ValidationMessage For="()=>LeaveApplicationDTO.LeaveTypeId" />
            </div>

            <div class="form-group">
                <label>Leave From</label>
                <InputDate @bind-Value="LeaveApplicationDTO.LeaveFrom" class="form-control"></InputDate>
                <ValidationMessage For="()=>LeaveApplicationDTO.LeaveFrom" />
            </div>

            <div class="form-group">
                <label>Leave To</label>
                <InputDate ValueChanged="@((DateTime leaveToDate) => CalculateLeaveDays(leaveToDate))" ValueExpression="@(()=>LeaveApplicationDTO.LeaveTo)" Value="LeaveApplicationDTO.LeaveTo" class="form-control"></InputDate>
                <ValidationMessage For="()=>LeaveApplicationDTO.LeaveTo" />
            </div>

            <div class="form-group">
                <label>Leave Days</label>
                <input type="text" readonly value="@LeaveApplicationDTO.LeaveDays" class="form-control" />
                <ValidationMessage For="()=>LeaveApplicationDTO.LeaveDays" />
            </div>

            <div class="form-group">
                <label>Leave Reason</label>
                <InputText @bind-Value="LeaveApplicationDTO.LeaveReason" class="form-control"></InputText>
                <ValidationMessage For="()=>LeaveApplicationDTO.LeaveReason" />
            </div>
            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="department" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>

    <div class="col-4">
        <lable>Leave Days</lable>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Leave Type</th>
                    <th>Days</th>
                    <th>Enjoyed</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                @if (EmployeeLeaveDays.Any())
                {
                    foreach (var leave in EmployeeLeaveDays)
                    {
                        <tr>
                            <td>@leave.LeaveType.LeaveTypeName</td>
                            <td>@leave.TotalLeaveDays</td>
                            <td>@leave.EnjoyLeaveDays</td>
                            <td>@leave.BalanceLeaveDays</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    public IEnumerable<LeaveTypeDTO> LeaveTypeList { get; set; } = new List<LeaveTypeDTO>();
    public IEnumerable<EmployeeLeaveDTO> EmployeeLeaveDays { get; set; } = new List<EmployeeLeaveDTO>();

    public bool IsLoading { get; set; }
    public LeaveApplicationDTO LeaveApplicationDTO { get; set; } = new()
        {
            ApplicationDate = DateTime.Now,
            LeaveFrom = DateTime.Now,
            LeaveTo = DateTime.Now,
            ApplicationStatus = SD.Status_Draft
        };
    public string Title { get; set; } = "Create";
    public string EmpId { get; set; } = "";
    public EmployeeDTO? Employee { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    IsLoading = true;

    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            EmpId = (await _userManager.FindByIdAsync(CurrentUser.UserId.ToString())).EmpId;
            Employee = await _employeeRepository.Get(Convert.ToInt32(EmpId));
            LeaveTypeList = await _leaveTypeRepository.GetAll();
            EmployeeLeaveDays = await _employeeLeaveRepository.GetAll(Convert.ToInt32(EmpId));
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLeaveApplication()
    {
        if (EmployeeLeaveDays.FirstOrDefault(a => a.EmployeeId == Employee?.Id)?.BalanceLeaveDays >= LeaveApplicationDTO.LeaveDays)
        {
            LeaveApplicationDTO.ApplicantId = Employee!.Id;
            if (Employee.ManagerId == null)
                LeaveApplicationDTO.ManagerId = (int)Employee.Id!;
            else
                LeaveApplicationDTO.ManagerId = (int)Employee.ManagerId!;
            LeaveApplicationDTO.ManagerName = Employee.FirstName + " " + Employee.LastName;

            await _leaveApplicationRepository.Create(LeaveApplicationDTO);
            _navigationManager.NavigateTo("/");
        }
    }

    private void CalculateLeaveDays(DateTime leaveToDate)
    {
        LeaveApplicationDTO.LeaveTo = leaveToDate;
        LeaveApplicationDTO.LeaveDays = ((LeaveApplicationDTO.LeaveTo - LeaveApplicationDTO.LeaveFrom).Days) + 1;
    }
}
