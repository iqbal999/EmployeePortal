@page "/lalist"
@inject ILeaveApplicationRepository _leaveApplicationRepository
@inject NavigationManager _navigationManager
@inject UserManager<ApplicationUser> _userManager;
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Leave Application List</h4>
    </div>

    <div class="col-4 offset-2">
        <a href="" class="btn btn-primary form-control">Add New</a>
    </div>

    <div class="col-12 mt-2">
        @if (LeaveApplications.Any())
        {
            <table id="mytable1" class="table table-bordered table-striped">
                <thead style="font-size: 12px;">
                    <tr>
                        <th>Application Id</th>
                        <th>Application Date</th>
                        <th>Leave Type</th>
                        <th>Leave From</th>
                        <th>Leave To</th>
                        <th>Leave Days</th>
                        <th>Leave Reason</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody style="font-size: 12px;">
                    @foreach (var objCat in LeaveApplications)
                    {
                        <tr>
                            <td>@objCat.ApplicationId</td>
                            <td>@objCat.ApplicationDate</td>
                            <td>@objCat.LeaveType?.LeaveTypeName</td>
                            <td>@objCat.LeaveFrom</td>
                            <td>@objCat.LeaveTo</td>
                            <td>@objCat.LeaveDays</td>
                            <td>@objCat.LeaveReason</td>
                            <td>@objCat.ApplicationStatus</td>
                            <td>
                                <NavLink href="@($"employee/edit/{objCat.Id}")" class="btn btn-sm btn-outline-primary"><i class="bi bi-pencil"></i></NavLink>
                                <button class="btn btn-sm btn-outline-danger" @*@onclick="()=>HandleDelete(objCat.Id)*@"><i class="bi bi-trash"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
            else
            {
                <p>No Record Found</p>
            }
        }
    </div>
</div>

<style>
    table.dataTable {
        border-collapse: collapse;
    }
</style>

@code {
    public bool IsLoading { get; set; }
    public IEnumerable<LeaveApplicationDTO> LeaveApplications { get; set; } = new List<LeaveApplicationDTO>();
    public string EmpId { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        EmpId = (await _userManager.FindByIdAsync(CurrentUser.UserId.ToString())).EmpId;
        var roles = await _userManager.GetRolesAsync(await _userManager.FindByIdAsync(CurrentUser.UserId.ToString()));

        if (roles[0].Equals(SD.Role_Employee))
        {
            LeaveApplications = await _leaveApplicationRepository.GetAll(Convert.ToInt32(EmpId));
        }
        else if(roles[0].Equals(SD.Role_Admin))
        {
            LeaveApplications = await _leaveApplicationRepository.GetAll();
        }

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("InitTable");
        }
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        //if (isConfirmed && DeleteEmployeeId != 0)
        //{
        //    await _empoyeeRepository.Delete(DeleteEmployeeId);
        //    Employees = await _empoyeeRepository.GetAll();
        //    await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        //}
        IsLoading = false;
    }
}
