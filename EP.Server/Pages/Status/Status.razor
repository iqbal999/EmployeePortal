@page "/status/create"
@page "/status/edit/{id:int}"

@inject IStatusRepository _statusRepository
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Status</h3>

    <div class="col-8">
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-danger" role="alert">
                @Message
            </div>
        }

        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="StatusDTO" OnValidSubmit="HandleStatus">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Status Name</label>
                    <InputText @bind-Value="StatusDTO.StatusName" class="form-control"></InputText>
                    <ValidationMessage For="()=>StatusDTO.StatusName" />
                </div>

                <div class="form-group">
                    <label>Remarks</label>
                    <InputText @bind-Value="StatusDTO.Remarks" class="form-control"></InputText>
                    <ValidationMessage For="()=>StatusDTO.Remarks" />
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="status" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }

    </div>
</div>

@code {
    public StatusDTO StatusDTO { get; set; } = new();
    public string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string Message { get; set; } = "";

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            IsLoading = false;
        }
        else
        {
            Title = "Edit";
            StatusDTO = await _statusRepository.Get(Id);
        }
    }

    private async Task HandleStatus()
    {
        @if (StatusDTO.Id == 0)
        {
            var result = await _statusRepository.Create(StatusDTO);
            if (result.Id == 0)
            {
                Message = "Record already exists";
            }
            else
            {
                _navigationManager.NavigateTo("/status");
            }
        }
        else
        {
            await _statusRepository.Update(StatusDTO);
        }

    }

}
